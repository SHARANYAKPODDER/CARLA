# -*- coding: utf-8 -*-
"""carlacode4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UV7GLe0Lau6Pkfk0uNuBhnOLX-6MKdcs
"""

import glob
import os
import sys
import cv2
import random
import matplotlib.pyplot as plt
import time
import numpy as np
import argparse
import carla

try:
  sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
      sys.version_info.major,
      sys.version_info.minor,
      'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
  pass


class CarEnv:
  STEER_AMT = 1.0  # for full turn or full steer
  
  actor_list = []
  collision_hist = []  # if there's anything in the list , it means we have crashed
  
  def __init__(self):
    self.client = carla.Client('localhost', 2000)
    self.client.set_timeout(2.0)
    
    self.world = self.client.get_world()
    
    blueprint_library = self.world.get_blueprint_library()
    
    self.model_3 = blueprint_library.filter('cybertruck')[0]
  
  
  def reset(self):
    self.collision_hist = []
    self.actor_list = []
    
    self.transform = random.choice(self.world.get_map().get_spawn_points())
    self.vehicle = self.world.spawn_actor(self.model_3, self.transform)
    self.actor_list.append(self.vehicle)
    
    self.rgb_cam = self.world.get_blueprint_library().find('sensor.camera.rgb')
    
    self.rgb_cam.set_attribute('image_size_x', f'{self.im_width}')
    self.rgb_cam.set_attribute('image_size_y', f'{self.im_height}')
    self.rgb_cam.set_attribute('fov', '110')
    
    transform = carla.Transform(carla.Location(x=2.5, z=0.7))
    
    self.sensor = self.world.spawn_actor(self.rgb_cam, transform, attach_to=self.vehicle)
    
    self.actor_list.append(self.sensor)
    self.sensor.listen(lambda data: self.process_img(data))
    
    self.vehicle.apply_control(carla.VehicleControl(throttle=0.0, brake=0.0))
    
    
    time.sleep(4)
    
    colsensor = self.world.get_blueprint_library().find('sensor.other.collision')
    self.colsensor = self.world.spawn_actor(colsensor, transform, attach_to=self.vehicle)
    self.actor_list.append(self.colsensor)
    self.colsensor.listen(lambda event: self.collision_data(event))
    
    while self.front_camera is None:
      time.sleep(0.01)
    
    self.episode_start = time.time()
    self.vehicle.apply_control(carla.VehicleControl(brake=0.0, throttle=0.0))
    
    return self.front_camera
  
  
  
  def collision_data(self, event):
    self.collision_hist.append(event)
  
  
  def process_img(self, image):
    i = np.array(image.raw_data)
    i2 = i.reshape((self.im_height, self.im_width, 4))
    i3 = i2[:, :, :3]
    if self.SHOW_CAM:
      cv2.imshow("",i3)
      cv2.waitKey(1)
    self.front_camera = i3
  
  
  def step(self, action):
    if action == 0:
      self.vehicle.apply_control(carla.VehicleControl(throttle=1.0, steer=0))
    
    if action == 1:
      self.vehicle.apply_control(carla.VehicleControl(throttle=1.0, steer=-1*self.STEER_AMT))
    
    if action == 2:
      self.vehicle.apply_control(carla.VehicleControl(throttle=1.0, steer=1*self.STEER_AMT))
    
    v = self.vehicle.get_velocity()
    kmh = int(3.6 * math.sqrt(v.x**2 + v.y**2 + v.z**2))
    
    
    if len(self.collision_hist) != 0:
      done = True
      reward = -200
    elif kmh < 50:
      done = False
      reward = -1
    else:
      done = False
      reward = 1
    
    if self.episode_start + SECONDS_PER_EPISODE < time.time():
      done = True
    
    return self.front_camera, reward, done, None